[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Transport Mode Detection",
    "section": "",
    "text": "1 Task Description\nUnderstanding human mobility is a key challenge in many fields, including transportation planning, epidemiology, and environmental science. Movement data can (and is) collected in various ways, including GPS data from smartphones, GPS trackers, or other devices. Usually, we are interested in understanding the transportation mode of a user, as this can provide valuable insights into the user’s behavior and preferences. However, this information is usually not available, and it can be challenging to infer the transportation mode from the GPS data alone.\nIn this project, we will use anotated movement data from the project by Zheng et al. (2011). The goal is to enrich the data with additional features and build a model that can predict the transportation mode of a user based on the GPS data.\n\n\n\n\nZheng, Yu, Hao Fu, Xing Xie, Wei-Ying Ma, and Quannan Li. 2011. Geolife GPS Trajectory Dataset - User Guide. Geolife GPS trajectories 1.1. https://www.microsoft.com/en-us/research/publication/geolife-gps-trajectory-dataset-user-guide/.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Task Description</span>"
    ]
  },
  {
    "objectID": "02_Data-Description.html",
    "href": "02_Data-Description.html",
    "title": "2  Data Description",
    "section": "",
    "text": "2.1 Original Dataset\nThe original dataset provided by Zheng et al. (2011) was collected in the GeoLife project (Microsoft Research Asia) by 182 users in a period of over three years (from April 2007 to August 2012). A GPS trajectory of this dataset is represented by a sequence of time-stamped points, each of which contains the information of latitude, longitude and altitude. This dataset contains 17’621 trajectories with a total distance of about 1.2 million kilometers and a total duration of 48,000+ hours. These trajectories were recorded by different GPS loggers and GPS-phones, and have a variety of sampling rates. 91 percent of the trajectories are logged in a dense representation, e.g. every 1~5 seconds or every 5~10 meters per point.\nThis dataset consists of a broad range of users’ outdoor movements, including not only life routines like go home and go to work but also some entertainments and sports activities, such as shopping, sightseeing, dining, hiking, and cycling. 73 users have labeled their trajectories with transportation mode, such as driving, taking a bus, riding a bike and walking.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Description</span>"
    ]
  },
  {
    "objectID": "02_Data-Description.html#processed-dataset",
    "href": "02_Data-Description.html#processed-dataset",
    "title": "2  Data Description",
    "section": "2.2 Processed dataset",
    "text": "2.2 Processed dataset\nWe downloaded Version 1.2.2 of the original dataset (on the 19.11.2024) and processed it in the following manner:\n\nMerged the data of all users into a single dataset\nAdded transport mode labels and removed all trajectories without a transport mode label.\nSplit the trajectories into segments based on the user id, transportation mode and time difference between consecutive points. A new segment is created if the time difference is larger than 10 minutes.\nSplit the segments (from the previous step) further based on the distance between consecutive points. A new segment is created if the distance is larger than 100 meters. The created segment ids are unique across all users.\nRemoved all segments with less than 100 points.\nProjected the data into UTM zone 50N (EPSG: 32650)\nRemoved all segments that move outside of the bounding box of Beijing (406993 , 487551 , 4387642, 4463488 in EPSG 32650)\nSplit the data into 4 sets of training, testing and validation data.\n\nThe full process is documented in this GitHub Repository.\n\n\n\n\nZheng, Yu, Hao Fu, Xing Xie, Wei-Ying Ma, and Quannan Li. 2011. Geolife GPS Trajectory Dataset - User Guide. Geolife GPS trajectories 1.1. https://www.microsoft.com/en-us/research/publication/geolife-gps-trajectory-dataset-user-guide/.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data Description</span>"
    ]
  },
  {
    "objectID": "03_Step-by-Step-Instructions.html",
    "href": "03_Step-by-Step-Instructions.html",
    "title": "3  Step-by-Step Instructions",
    "section": "",
    "text": "3.1 Step 1: Load necessary libraries\nTo solve this task, we will use the following libraries. Instll these from CRAN using install.packages()\nlibrary(sf)         # for spatial data handling\nlibrary(forcats)    # for factor handling\nlibrary(dplyr)      # for data manipulation\nlibrary(zoo)        # for rolling window functions\nlibrary(ggplot2)    # for generic plotting    \nlibrary(rpart)      # for building the model\nlibrary(rpart.plot) # for plotting the model\nWe also need the newest version of tmap. Install this from github using the R package remotes (install if neccesary)\n# remotes::install_github(\"r-tmap/tmap\")\n\nlibrary(tmap)       # for spatial maps",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Step-by-Step Instructions</span>"
    ]
  },
  {
    "objectID": "03_Step-by-Step-Instructions.html#step-2-load-the-data",
    "href": "03_Step-by-Step-Instructions.html#step-2-load-the-data",
    "title": "3  Step-by-Step Instructions",
    "section": "3.2 Step 2: Load the data",
    "text": "3.2 Step 2: Load the data\nThe dataset tracks_1.gpkg contains the training, testing and validation data as separate layers. We will load the training data and the testing data, and then combine them into a single dataset.\n\n# List layers in the geopackage\nst_layers(\"data/tracks_1.gpkg\")\n\nDriver: GPKG \nAvailable layers:\n  layer_name geometry_type features fields              crs_name\n1   training         Point   501432      5 WGS 84 / UTM zone 50N\n2    testing         Point   262851      5 WGS 84 / UTM zone 50N\n3 validation         Point   240449      4 WGS 84 / UTM zone 50N\n\ntraining_dataset &lt;- read_sf(\"data/tracks_1.gpkg\", layer = \"training\") |&gt; \n  mutate(data = \"training\")\ntesting_dataset &lt;- read_sf(\"data/tracks_1.gpkg\", layer = \"testing\") |&gt; \n  mutate(data = \"testing\")\n\n\nfull_dataset &lt;- bind_rows(training_dataset, testing_dataset)\n\nLet’s visualize the data as a map. The package tmap is very handy for this task.\n\nfull_dataset |&gt; \n  tm_shape() + \n  tm_dots() + \n  tm_basemap(\"CartoDB.Positron\")",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Step-by-Step Instructions</span>"
    ]
  },
  {
    "objectID": "03_Step-by-Step-Instructions.html#step-3-feature-engineering",
    "href": "03_Step-by-Step-Instructions.html#step-3-feature-engineering",
    "title": "3  Step-by-Step Instructions",
    "section": "3.3 Step 3: Feature engineering",
    "text": "3.3 Step 3: Feature engineering\nFeature engineering is a crucial step in preparing data for analysis and modeling. It involves creating new variables, or features, that capture important patterns or relationships in the data. Well-designed features can enhance the performance of machine learning models by making the relevant information more accessible.\nIn this task, we aim to enrich the GPS dataset with features derived from the spatial and temporal relationships between consecutive points within each trajectory. Specifically, we will compute metrics such as the distance between consecutive points (step length), the time difference between consecutive timestamps (time lag), and the average speed over these intervals. These features provide valuable insights into movement behavior and are essential for distinguishing between different transportation modes.\nBy engineering these features, we transform raw GPS data into a more informative format, setting the stage for building predictive models.\n\n3.3.1 Speed\n\nfull_dataset &lt;- full_dataset |&gt; \n  mutate(\n    steplength = as.numeric(st_distance(lead(geom), geom, by_element = TRUE)),\n    timelag = as.numeric(difftime(lead(datetime), datetime, units = \"secs\")),\n    speed = steplength / timelag,\n    .by = track_id\n  )\n\nTo understand the relationship between movement speed and transportation modes, we will summarize and visualize the dataset. By analyzing the average speeds for different modes of transportation, we can identify distinct patterns that might aid in differentiating between them.\nIn this step, we compute the mean speed for each combination of transportation mode and track, ensuring that missing values do not skew the results. Afterward, we reorder the transportation modes based on their average speeds, making the visualization more intuitive. Finally, we create a boxplot to display the speed distributions for each mode, highlighting the variability and central tendencies within the data.\nThis analysis provides a clear overview of how speed varies by transportation mode, offering valuable insights for feature interpretation and model development.\n\nfull_dataset |&gt; \n  st_drop_geometry() |&gt; \n  summarise(\n    speed = mean(speed, na.rm = TRUE),\n    .by = c(mode, track_id)\n  ) |&gt; \n  mutate(\n    mode = fct_reorder(mode, speed)\n  ) |&gt; \n  ggplot() +\n  geom_boxplot(aes(speed, mode, fill = mode)) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nFigure 3.1: Average speed per segment for different transportation modes.\n\n\n\n\n\nNote that Figure 3.1 shows that the average speed per segment varies significantly between different transportation modes. This information can be used to distinguish between modes based on speed-related features on a per segment basis. However, this might not help to distinguish transport mode on a per point basis.\n\n\n3.3.2 Acceleration\nAcceleration, the rate of change in speed over time, is a valuable feature for understanding movement dynamics. Unlike speed, which provides information about the magnitude of motion, acceleration captures changes in motion - whether an object is speeding up, slowing down, or maintaining a constant velocity.\nThis feature is particularly useful for distinguishing transportation modes. For example, walking and cycling often exhibit more frequent changes in acceleration compared to driving or taking a bus, which tend to involve smoother transitions in speed. By incorporating acceleration into our analysis, we gain a deeper understanding of movement patterns and improve the ability to differentiate between modes of transportation.\n\nfull_dataset &lt;- full_dataset |&gt; \n  mutate(\n    acceleration = (lead(speed) - speed) / timelag,\n    .by = track_id\n  )\n\nLet’s have a look at the distribution of acceleration for different transportation modes on a per segment level.\n\nfull_dataset |&gt; \n  st_drop_geometry() |&gt; \n  summarise(\n    acceleration = mean(acceleration, na.rm = TRUE),\n    .by = c(mode, track_id)\n  ) |&gt; \n  mutate(\n    mode = fct_reorder(mode, acceleration)\n  ) |&gt; \n  ggplot() +\n  geom_boxplot(aes(acceleration, mode, fill = mode)) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nFigure 3.2: Average acceleration per segment for different transportation modes.\n\n\n\n\n\n\n\n3.3.3 Sinuosity\nSinuosity is a measure of the curvature of a path, and can be defined as the ratio between the actual traveled distance and the straight-line distance between the start and end points. A perfectly straight path has a sinuosity of 1, while more winding paths have higher sinuosity values.\nThis feature provides valuable insights into movement behavior, as different transportation modes often exhibit distinct patterns of sinuosity. For instance, walking and cycling paths may have higher sinuosity due to detours or obstacles, while driving or taking a train tends to follow straighter routes. By incorporating sinuosity into the analysis, we can enhance the ability to classify transportation modes based on their characteristic movement patterns.\nTo calculate sinuosity, we must first specify an observation window. In this case, we will consider the sinuosity over the next 5 points of each trajectory. This window size allows us to capture the curvature of the path while avoiding excessive noise from individual points. We will compute the straight-line distance between the current point and the point 5 steps ahead, as well as the total distance traveled over these 5 steps. The sinuosity is then calculated as the ratio between these two distances.\n\nfull_dataset &lt;- full_dataset |&gt; \n  mutate(\n    straight_dist5 = as.numeric(st_distance(lead(geom, 5), geom, by_element = TRUE)),\n    full_dist5 = rollsum(steplength, 5, fill = NA, align = \"left\", ),\n    sinuosity = full_dist5/straight_dist5,\n    .by = track_id\n  )\n\nHow does the average sinuosity differ between the different transportation modes?\n\nfull_dataset |&gt; \n  st_drop_geometry() |&gt; \n  summarise(\n    sinuosity = mean(sinuosity, na.rm = TRUE),\n    .by = c(mode, track_id)\n  ) |&gt; \n  mutate(\n    mode = fct_reorder(mode, sinuosity)\n  ) |&gt; \n  ggplot() +\n  geom_boxplot(aes(sinuosity, mode, fill = mode)) +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nFigure 3.3: Average sinuosity per segment for different transportation modes.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Step-by-Step Instructions</span>"
    ]
  },
  {
    "objectID": "03_Step-by-Step-Instructions.html#step-4-training-a-model",
    "href": "03_Step-by-Step-Instructions.html#step-4-training-a-model",
    "title": "3  Step-by-Step Instructions",
    "section": "3.4 Step 4: Training a model",
    "text": "3.4 Step 4: Training a model\nOnce the dataset has been enriched with meaningful features, the next step is to train a model that can learn patterns in the data and make predictions. Model training involves using labeled data to teach an algorithm to associate input features - such as speed, acceleration, and sinuosity - with the corresponding transportation mode.\nTo simplify the task, we will train a model to predict the transportation mode on a per segment basis. To do so, we will use three aggregation functions (mean, max and mean) to summarize the features for each segment.\n\n# To calculate mean, max and mean for each feature per segment, we will use custom\n# aggregation functions that remove NA values per default\nmean2 &lt;- \\(x) mean(x, na.rm = TRUE)\nmax2 &lt;- \\(x) max(x, na.rm = TRUE)\nmin2 &lt;- \\(x) min(x, na.rm = TRUE)\n\n\n# Create a summary dataset for the model\ntracks_smry &lt;- full_dataset |&gt; \n  # we can drop the geometry column, as we don't need it for the model\n  st_drop_geometry() |&gt; \n  # We select the features we want to use for the model\n  select(data, track_id, mode, steplength, timelag, speed, sinuosity) |&gt; \n  group_by(data, track_id, mode) |&gt; \n  summarise(\n    across(everything(), list(mean = mean2, max = max2, min = min2)),\n  ) |&gt; \n  mutate(\n    mode = factor(mode)\n  ) |&gt; \n  ungroup() |&gt; \n  select(-track_id)\n\n\n\n\n# Next, split training and testing\ntracks_training &lt;- tracks_smry |&gt; \n  filter(data == \"training\") |&gt; \n  select(-data)\n\ntracks_testing &lt;- tracks_smry |&gt; \n  filter(data == \"testing\") |&gt; \n  select(-data)\n\nNow we can build a model to predict the transportation mode based on the features we have engineered. We will use a classification tree model (CART) for this task, as a simple and interpretable model that can capture complex relationships between the features and the target variable.\n\n# Build the model based on the training data\ncart_model &lt;- rpart(mode~., data = tracks_training, method = \"class\")\n\n\nrpart.plot(cart_model, type = 2)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Step-by-Step Instructions</span>"
    ]
  },
  {
    "objectID": "03_Step-by-Step-Instructions.html#step-5-evaluating-the-model",
    "href": "03_Step-by-Step-Instructions.html#step-5-evaluating-the-model",
    "title": "3  Step-by-Step Instructions",
    "section": "3.5 Step 5: Evaluating the model",
    "text": "3.5 Step 5: Evaluating the model\nAfter training a model, it is essential to assess its performance to ensure it can accurately predict outcomes on unseen data. Model evaluation involves comparing the predicted labels with the true labels using metrics such as accuracy, precision, recall, and F1-score. These metrics provide insights into the model’s strengths and weaknesses, helping identify areas for improvement.\nIn addition to numerical metrics, visualizations like confusion matrices or ROC curves can offer a deeper understanding of how the model performs across different transportation modes. By thoroughly evaluating the model, we ensure it is both reliable and capable of generalizing beyond the training dataset.\n\n# Make predictions on the testing data\npredictions &lt;- predict(cart_model, tracks_testing) \n\n# Use the highest probability to predict the transportation mode\ntracks_testing$prediction &lt;- colnames(predictions)[apply(predictions, 1, which.max)]\n\n# Turn the prediction into a factor\ntracks_testing$prediction &lt;- factor(tracks_testing$prediction)\n\n# Sort the levels of the actual modes to match the predicted modes\ntracks_testing$mode &lt;- factor(tracks_testing$mode, levels = sort(unique(as.character(tracks_testing$mode))))\n\n\nlibrary(caret)\n\nconfusionMatrix(tracks_testing$prediction, reference = tracks_testing$mode)\n\nConfusion Matrix and Statistics\n\n          Reference\nPrediction bike bus car subway train walk\n    bike     68  20   2      1     0    3\n    bus      21  91  25      4     1   11\n    car       1  18  42      8     0    1\n    subway    0   0   8     18     1    0\n    train     0   0   0      1     4    0\n    walk     11  17   6     12     0  166\n\nOverall Statistics\n                                          \n               Accuracy : 0.6934          \n                 95% CI : (0.6534, 0.7313)\n    No Information Rate : 0.3226          \n    P-Value [Acc &gt; NIR] : &lt; 2.2e-16       \n                                          \n                  Kappa : 0.5937          \n                                          \n Mcnemar's Test P-Value : NA              \n\nStatistics by Class:\n\n                     Class: bike Class: bus Class: car Class: subway\nSensitivity               0.6733     0.6233    0.50602       0.40909\nSpecificity               0.9435     0.8506    0.94142       0.98259\nPos Pred Value            0.7234     0.5948    0.60000       0.66667\nNeg Pred Value            0.9293     0.8652    0.91650       0.95131\nPrevalence                0.1800     0.2602    0.14795       0.07843\nDetection Rate            0.1212     0.1622    0.07487       0.03209\nDetection Prevalence      0.1676     0.2727    0.12478       0.04813\nBalanced Accuracy         0.8084     0.7369    0.72372       0.69584\n                     Class: train Class: walk\nSensitivity              0.666667      0.9171\nSpecificity              0.998198      0.8789\nPos Pred Value           0.800000      0.7830\nNeg Pred Value           0.996403      0.9570\nPrevalence               0.010695      0.3226\nDetection Rate           0.007130      0.2959\nDetection Prevalence     0.008913      0.3779\nBalanced Accuracy        0.832432      0.8980",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Step-by-Step Instructions</span>"
    ]
  },
  {
    "objectID": "04_Your-Task.html",
    "href": "04_Your-Task.html",
    "title": "4  Your task",
    "section": "",
    "text": "Your task is to improve upon the simple model we have built. You can do this by:\n\nFeature Engineering: Create additional features that you think might help to distinguish between different transportation modes. For example, you could consider turning angles, stop durations or extending observation windows\nModel Selection: Experiment with different models (e.g., random forests, gradient boosting, neural networks) and hyperparameters to improve the predictive performance.\nPer point prediction: Instead of predicting the transportation mode on a per segment basis, try to predict the transportation mode for each point. This is a more challenging task but can provide more detailed insights into the movement behavior.\n\nUsing one or more of these approaches, predict the transportation mode for the validation dataset. Next week, we will evaluate the performance of your models and award the best performing team with a standing ovation.",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Your task</span>"
    ]
  },
  {
    "objectID": "05_References.html",
    "href": "05_References.html",
    "title": "5  References",
    "section": "",
    "text": "Zheng, Yu, Hao Fu, Xing Xie, Wei-Ying Ma, and Quannan Li. 2011.\nGeolife GPS Trajectory Dataset - User Guide. Geolife GPS\ntrajectories 1.1. https://www.microsoft.com/en-us/research/publication/geolife-gps-trajectory-dataset-user-guide/.",
    "crumbs": [
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>References</span>"
    ]
  }
]